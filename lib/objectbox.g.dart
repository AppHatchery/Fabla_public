// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'screens/diary/domain/entities/answer.dart';
import 'screens/diary/domain/entities/diary_entity.dart';
import 'screens/diary/domain/entities/prompt_entity.dart';
import 'screens/diary/domain/entities/protocol_entity.dart';
import 'screens/diary/domain/entities/recording.dart';
import 'screens/home/domain/entities/experiment.dart';
import 'screens/home/domain/entities/study.dart';
import 'screens/onboarding/domain/entities/participant.dart';
import 'screens/onboarding/domain/entities/questions_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 5854292124266384596),
      name: 'Answer',
      lastPropertyId: const obx_int.IdUid(4, 5873510534198742419),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5330924011387406619),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 792701499932547399),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1856960891214932324),
            name: 'response',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5873510534198742419),
            name: 'promptId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 4791128831704768824),
            relationTarget: 'Prompt')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'recordings', srcEntity: 'Recording', srcField: 'answer')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 2718562603036521648),
      name: 'Diary',
      lastPropertyId: const obx_int.IdUid(11, 2953292468504398457),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5147572662922355304),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1803781164331014128),
            name: 'studyID',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3057165327761051383),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8448922725316097263),
            name: 'start',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8504613382585994847),
            name: 'end',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6579302468880790468),
            name: 'entries',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 562672074575067987),
            name: 'currentEntry',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6452118090039355711),
            name: 'due',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7344206090163357604),
            name: 'deadline',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3256530960332762262),
            name: 'dbDiaryStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 2953292468504398457),
            name: 'notifications',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'prompts', srcEntity: 'Prompt', srcField: 'diary')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 2102395644300957026),
      name: 'Experiment',
      lastPropertyId: const obx_int.IdUid(7, 5724173273923276127),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4420343772847430884),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6773748951742014759),
            name: 'login',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4188064453485768981),
            name: 'researcher',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 562404920878106569),
            name: 'organization',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2506703993803422451),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2603864382414346900),
            name: 'duration',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5724173273923276127),
            name: 'description',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 349636722219385723),
      name: 'Participant',
      lastPropertyId: const obx_int.IdUid(3, 4397783093950340128),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 864294661472962239),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5987744461729918873),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4397783093950340128),
            name: 'studyCode',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 8772867094899341742),
      name: 'Prompt',
      lastPropertyId: const obx_int.IdUid(7, 2145501645015716071),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8132408664234994706),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6024934436238040586),
            name: 'question',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7621251383171857179),
            name: 'option',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4414088368547435870),
            name: 'subtitle',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1921250108702699620),
            name: 'required',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4681877718501396308),
            name: 'diaryId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 6631521764056071387),
            relationTarget: 'Diary'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2145501645015716071),
            name: 'responseTypeValue',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'answers', srcEntity: 'Answer', srcField: 'prompt')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 6091333895423423885),
      name: 'ProtocolEntity',
      lastPropertyId: const obx_int.IdUid(5, 2471532132609385406),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4619257633086111466),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3213502991969066769),
            name: 'version',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 412174614935791710),
            name: 'weeklyGoal',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8757730362604045872),
            name: 'dailyGoal',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2471532132609385406),
            name: 'diaryBlueprints',
            type: 30,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 1748021281935827717),
      name: 'QuestionsEntity',
      lastPropertyId: const obx_int.IdUid(10, 4226934096153378817),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3961175314670380402),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4334280845023347725),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1113159504706489936),
            name: 'subtitle',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 426493442725437305),
            name: 'options',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3922881303515000855),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7750263042683215055),
            name: 'min',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6174335443674272054),
            name: 'max',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5424774880361595912),
            name: 'answer',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 523294475925365727),
            name: 'defaultValue',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 4226934096153378817),
            name: 'variable',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 6563800693063139779),
      name: 'Recording',
      lastPropertyId: const obx_int.IdUid(6, 5997037681344134171),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5584788537534046128),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6222127652789076469),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 135726372924099430),
            name: 'path',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6179758231632725228),
            name: 'transcript',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5333454612988718868),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5997037681344134171),
            name: 'answerId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 6458972295195859441),
            relationTarget: 'Answer')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 7496160323398228160),
      name: 'Study',
      lastPropertyId: const obx_int.IdUid(6, 5903923034696034310),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1600386079895184378),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2713224796906688125),
            name: 'studyId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8049948232794000671),
            name: 'experimentCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5836502815872426071),
            name: 'goals',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5560967743883992339),
            name: 'incentive',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5903923034696034310),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(9, 7496160323398228160),
      lastIndexId: const obx_int.IdUid(3, 6458972295195859441),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Answer: obx_int.EntityDefinition<Answer>(
        model: _entities[0],
        toOneRelations: (Answer object) => [object.prompt],
        toManyRelations: (Answer object) => {
              obx_int.RelInfo<Recording>.toOneBacklink(
                      6, object.id, (Recording srcObject) => srcObject.answer):
                  object.recordings
            },
        getId: (Answer object) => object.id,
        setId: (Answer object, int id) {
          object.id = id;
        },
        objectToFB: (Answer object, fb.Builder fbb) {
          final responseOffset = object.response == null
              ? null
              : fbb.writeString(object.response!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.date.millisecondsSinceEpoch);
          fbb.addOffset(2, responseOffset);
          fbb.addInt64(3, object.prompt.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final responseParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final object =
              Answer(id: idParam, date: dateParam, response: responseParam);
          object.prompt.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.prompt.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Answer>(
              object.recordings,
              store,
              obx_int.RelInfo<Recording>.toOneBacklink(
                  6, object.id, (Recording srcObject) => srcObject.answer));
          return object;
        }),
    Diary: obx_int.EntityDefinition<Diary>(
        model: _entities[1],
        toOneRelations: (Diary object) => [],
        toManyRelations: (Diary object) => {
              obx_int.RelInfo<Prompt>.toOneBacklink(
                      6, object.id, (Prompt srcObject) => srcObject.diary):
                  object.prompts
            },
        getId: (Diary object) => object.id,
        setId: (Diary object, int id) {
          object.id = id;
        },
        objectToFB: (Diary object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final deadlineOffset = fbb.writeString(object.deadline);
          final notificationsOffset = fbb.writeString(object.notifications);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.studyID);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.start.millisecondsSinceEpoch);
          fbb.addInt64(4, object.end.millisecondsSinceEpoch);
          fbb.addInt64(5, object.entries);
          fbb.addInt64(6, object.currentEntry);
          fbb.addInt64(7, object.due.millisecondsSinceEpoch);
          fbb.addOffset(8, deadlineOffset);
          fbb.addInt64(9, object.dbDiaryStatus);
          fbb.addOffset(10, notificationsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final studyIDParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final dueParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));
          final startParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final entriesParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final currentEntryParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final endParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final deadlineParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final notificationsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, '');
          final object = Diary(
              id: idParam,
              studyID: studyIDParam,
              name: nameParam,
              due: dueParam,
              start: startParam,
              entries: entriesParam,
              currentEntry: currentEntryParam,
              end: endParam,
              deadline: deadlineParam,
              notifications: notificationsParam)
            ..dbDiaryStatus = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 22);
          obx_int.InternalToManyAccess.setRelInfo<Diary>(
              object.prompts,
              store,
              obx_int.RelInfo<Prompt>.toOneBacklink(
                  6, object.id, (Prompt srcObject) => srcObject.diary));
          return object;
        }),
    Experiment: obx_int.EntityDefinition<Experiment>(
        model: _entities[2],
        toOneRelations: (Experiment object) => [],
        toManyRelations: (Experiment object) => {},
        getId: (Experiment object) => object.id,
        setId: (Experiment object, int id) {
          object.id = id;
        },
        objectToFB: (Experiment object, fb.Builder fbb) {
          final loginOffset = fbb.writeString(object.login);
          final researcherOffset = fbb.writeString(object.researcher);
          final organizationOffset = fbb.writeString(object.organization);
          final nameOffset = fbb.writeString(object.name);
          final durationOffset = fbb.writeString(object.duration);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, loginOffset);
          fbb.addOffset(2, researcherOffset);
          fbb.addOffset(3, organizationOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, durationOffset);
          fbb.addOffset(6, descriptionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final loginParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final researcherParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final organizationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final durationParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final object = Experiment(
              id: idParam,
              login: loginParam,
              researcher: researcherParam,
              organization: organizationParam,
              name: nameParam,
              duration: durationParam,
              description: descriptionParam);

          return object;
        }),
    Participant: obx_int.EntityDefinition<Participant>(
        model: _entities[3],
        toOneRelations: (Participant object) => [],
        toManyRelations: (Participant object) => {},
        getId: (Participant object) => object.id,
        setId: (Participant object, int id) {
          object.id = id;
        },
        objectToFB: (Participant object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final studyCodeOffset = fbb.writeString(object.studyCode);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, studyCodeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final studyCodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = Participant(
              id: idParam, name: nameParam, studyCode: studyCodeParam);

          return object;
        }),
    Prompt: obx_int.EntityDefinition<Prompt>(
        model: _entities[4],
        toOneRelations: (Prompt object) => [object.diary],
        toManyRelations: (Prompt object) => {
              obx_int.RelInfo<Answer>.toOneBacklink(
                      4, object.id, (Answer srcObject) => srcObject.prompt):
                  object.answers
            },
        getId: (Prompt object) => object.id,
        setId: (Prompt object, int id) {
          object.id = id;
        },
        objectToFB: (Prompt object, fb.Builder fbb) {
          final questionOffset = fbb.writeString(object.question);
          final optionOffset =
              object.option == null ? null : fbb.writeString(object.option!);
          final subtitleOffset = object.subtitle == null
              ? null
              : fbb.writeString(object.subtitle!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, questionOffset);
          fbb.addOffset(2, optionOffset);
          fbb.addOffset(3, subtitleOffset);
          fbb.addBool(4, object.required);
          fbb.addInt64(5, object.diary.targetId);
          fbb.addInt64(6, object.responseTypeValue);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final questionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final optionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final subtitleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final requiredParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final object = Prompt(
              id: idParam,
              question: questionParam,
              option: optionParam,
              subtitle: subtitleParam,
              required: requiredParam)
            ..responseTypeValue = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 16);
          object.diary.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.diary.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Prompt>(
              object.answers,
              store,
              obx_int.RelInfo<Answer>.toOneBacklink(
                  4, object.id, (Answer srcObject) => srcObject.prompt));
          return object;
        }),
    ProtocolEntity: obx_int.EntityDefinition<ProtocolEntity>(
        model: _entities[5],
        toOneRelations: (ProtocolEntity object) => [],
        toManyRelations: (ProtocolEntity object) => {},
        getId: (ProtocolEntity object) => object.id,
        setId: (ProtocolEntity object, int id) {
          object.id = id;
        },
        objectToFB: (ProtocolEntity object, fb.Builder fbb) {
          final diaryBlueprintsOffset = fbb.writeList(object.diaryBlueprints
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.version);
          fbb.addInt64(2, object.weeklyGoal);
          fbb.addInt64(3, object.dailyGoal);
          fbb.addOffset(4, diaryBlueprintsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final versionParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final weeklyGoalParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final dailyGoalParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final diaryBlueprintsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 12, []);
          final object = ProtocolEntity(
              id: idParam,
              version: versionParam,
              weeklyGoal: weeklyGoalParam,
              dailyGoal: dailyGoalParam,
              diaryBlueprints: diaryBlueprintsParam);

          return object;
        }),
    QuestionsEntity: obx_int.EntityDefinition<QuestionsEntity>(
        model: _entities[6],
        toOneRelations: (QuestionsEntity object) => [],
        toManyRelations: (QuestionsEntity object) => {},
        getId: (QuestionsEntity object) => object.id,
        setId: (QuestionsEntity object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field QuestionsEntity.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (QuestionsEntity object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final subtitleOffset = object.subtitle == null
              ? null
              : fbb.writeString(object.subtitle!);
          final optionsOffset =
              object.options == null ? null : fbb.writeString(object.options!);
          final typeOffset = fbb.writeString(object.type);
          final answerOffset =
              object.answer == null ? null : fbb.writeString(object.answer!);
          final variableOffset = fbb.writeString(object.variable);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, subtitleOffset);
          fbb.addOffset(3, optionsOffset);
          fbb.addOffset(4, typeOffset);
          fbb.addInt64(5, object.min);
          fbb.addInt64(6, object.max);
          fbb.addOffset(7, answerOffset);
          fbb.addInt64(8, object.defaultValue);
          fbb.addOffset(9, variableOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final subtitleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final optionsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final minParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final maxParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final defaultValueParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final variableParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final answerParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final object = QuestionsEntity(
              id: idParam,
              title: titleParam,
              subtitle: subtitleParam,
              options: optionsParam,
              type: typeParam,
              min: minParam,
              max: maxParam,
              defaultValue: defaultValueParam,
              variable: variableParam,
              answer: answerParam);

          return object;
        }),
    Recording: obx_int.EntityDefinition<Recording>(
        model: _entities[7],
        toOneRelations: (Recording object) => [object.answer],
        toManyRelations: (Recording object) => {},
        getId: (Recording object) => object.id,
        setId: (Recording object, int id) {
          object.id = id;
        },
        objectToFB: (Recording object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final pathOffset = fbb.writeString(object.path);
          final transcriptOffset = object.transcript == null
              ? null
              : fbb.writeString(object.transcript!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, pathOffset);
          fbb.addOffset(3, transcriptOffset);
          fbb.addInt64(4, object.date.millisecondsSinceEpoch);
          fbb.addInt64(5, object.answer.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final pathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final transcriptParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = Recording(
              nameParam, pathParam, transcriptParam, dateParam,
              id: idParam);
          object.answer.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.answer.attach(store);
          return object;
        }),
    Study: obx_int.EntityDefinition<Study>(
        model: _entities[8],
        toOneRelations: (Study object) => [],
        toManyRelations: (Study object) => {},
        getId: (Study object) => object.id,
        setId: (Study object, int id) {
          object.id = id;
        },
        objectToFB: (Study object, fb.Builder fbb) {
          final experimentCodeOffset = fbb.writeString(object.experimentCode);
          final goalsOffset = fbb.writeString(object.goals);
          final incentiveOffset = fbb.writeString(object.incentive);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.studyId);
          fbb.addOffset(2, experimentCodeOffset);
          fbb.addOffset(3, goalsOffset);
          fbb.addOffset(4, incentiveOffset);
          fbb.addOffset(5, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final studyIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final experimentCodeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final goalsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final incentiveParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = Study(
              id: idParam,
              studyId: studyIdParam,
              name: nameParam,
              experimentCode: experimentCodeParam,
              goals: goalsParam,
              incentive: incentiveParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Answer] entity fields to define ObjectBox queries.
class Answer_ {
  /// See [Answer.id].
  static final id =
      obx.QueryIntegerProperty<Answer>(_entities[0].properties[0]);

  /// See [Answer.date].
  static final date = obx.QueryDateProperty<Answer>(_entities[0].properties[1]);

  /// See [Answer.response].
  static final response =
      obx.QueryStringProperty<Answer>(_entities[0].properties[2]);

  /// See [Answer.prompt].
  static final prompt =
      obx.QueryRelationToOne<Answer, Prompt>(_entities[0].properties[3]);

  /// see [Answer.recordings]
  static final recordings =
      obx.QueryBacklinkToMany<Recording, Answer>(Recording_.answer);
}

/// [Diary] entity fields to define ObjectBox queries.
class Diary_ {
  /// See [Diary.id].
  static final id = obx.QueryIntegerProperty<Diary>(_entities[1].properties[0]);

  /// See [Diary.studyID].
  static final studyID =
      obx.QueryIntegerProperty<Diary>(_entities[1].properties[1]);

  /// See [Diary.name].
  static final name =
      obx.QueryStringProperty<Diary>(_entities[1].properties[2]);

  /// See [Diary.start].
  static final start = obx.QueryDateProperty<Diary>(_entities[1].properties[3]);

  /// See [Diary.end].
  static final end = obx.QueryDateProperty<Diary>(_entities[1].properties[4]);

  /// See [Diary.entries].
  static final entries =
      obx.QueryIntegerProperty<Diary>(_entities[1].properties[5]);

  /// See [Diary.currentEntry].
  static final currentEntry =
      obx.QueryIntegerProperty<Diary>(_entities[1].properties[6]);

  /// See [Diary.due].
  static final due = obx.QueryDateProperty<Diary>(_entities[1].properties[7]);

  /// See [Diary.deadline].
  static final deadline =
      obx.QueryStringProperty<Diary>(_entities[1].properties[8]);

  /// See [Diary.dbDiaryStatus].
  static final dbDiaryStatus =
      obx.QueryIntegerProperty<Diary>(_entities[1].properties[9]);

  /// See [Diary.notifications].
  static final notifications =
      obx.QueryStringProperty<Diary>(_entities[1].properties[10]);

  /// see [Diary.prompts]
  static final prompts = obx.QueryBacklinkToMany<Prompt, Diary>(Prompt_.diary);
}

/// [Experiment] entity fields to define ObjectBox queries.
class Experiment_ {
  /// See [Experiment.id].
  static final id =
      obx.QueryIntegerProperty<Experiment>(_entities[2].properties[0]);

  /// See [Experiment.login].
  static final login =
      obx.QueryStringProperty<Experiment>(_entities[2].properties[1]);

  /// See [Experiment.researcher].
  static final researcher =
      obx.QueryStringProperty<Experiment>(_entities[2].properties[2]);

  /// See [Experiment.organization].
  static final organization =
      obx.QueryStringProperty<Experiment>(_entities[2].properties[3]);

  /// See [Experiment.name].
  static final name =
      obx.QueryStringProperty<Experiment>(_entities[2].properties[4]);

  /// See [Experiment.duration].
  static final duration =
      obx.QueryStringProperty<Experiment>(_entities[2].properties[5]);

  /// See [Experiment.description].
  static final description =
      obx.QueryStringProperty<Experiment>(_entities[2].properties[6]);
}

/// [Participant] entity fields to define ObjectBox queries.
class Participant_ {
  /// See [Participant.id].
  static final id =
      obx.QueryIntegerProperty<Participant>(_entities[3].properties[0]);

  /// See [Participant.name].
  static final name =
      obx.QueryStringProperty<Participant>(_entities[3].properties[1]);

  /// See [Participant.studyCode].
  static final studyCode =
      obx.QueryStringProperty<Participant>(_entities[3].properties[2]);
}

/// [Prompt] entity fields to define ObjectBox queries.
class Prompt_ {
  /// See [Prompt.id].
  static final id =
      obx.QueryIntegerProperty<Prompt>(_entities[4].properties[0]);

  /// See [Prompt.question].
  static final question =
      obx.QueryStringProperty<Prompt>(_entities[4].properties[1]);

  /// See [Prompt.option].
  static final option =
      obx.QueryStringProperty<Prompt>(_entities[4].properties[2]);

  /// See [Prompt.subtitle].
  static final subtitle =
      obx.QueryStringProperty<Prompt>(_entities[4].properties[3]);

  /// See [Prompt.required].
  static final required =
      obx.QueryBooleanProperty<Prompt>(_entities[4].properties[4]);

  /// See [Prompt.diary].
  static final diary =
      obx.QueryRelationToOne<Prompt, Diary>(_entities[4].properties[5]);

  /// See [Prompt.responseTypeValue].
  static final responseTypeValue =
      obx.QueryIntegerProperty<Prompt>(_entities[4].properties[6]);

  /// see [Prompt.answers]
  static final answers =
      obx.QueryBacklinkToMany<Answer, Prompt>(Answer_.prompt);
}

/// [ProtocolEntity] entity fields to define ObjectBox queries.
class ProtocolEntity_ {
  /// See [ProtocolEntity.id].
  static final id =
      obx.QueryIntegerProperty<ProtocolEntity>(_entities[5].properties[0]);

  /// See [ProtocolEntity.version].
  static final version =
      obx.QueryIntegerProperty<ProtocolEntity>(_entities[5].properties[1]);

  /// See [ProtocolEntity.weeklyGoal].
  static final weeklyGoal =
      obx.QueryIntegerProperty<ProtocolEntity>(_entities[5].properties[2]);

  /// See [ProtocolEntity.dailyGoal].
  static final dailyGoal =
      obx.QueryIntegerProperty<ProtocolEntity>(_entities[5].properties[3]);

  /// See [ProtocolEntity.diaryBlueprints].
  static final diaryBlueprints =
      obx.QueryStringVectorProperty<ProtocolEntity>(_entities[5].properties[4]);
}

/// [QuestionsEntity] entity fields to define ObjectBox queries.
class QuestionsEntity_ {
  /// See [QuestionsEntity.id].
  static final id =
      obx.QueryIntegerProperty<QuestionsEntity>(_entities[6].properties[0]);

  /// See [QuestionsEntity.title].
  static final title =
      obx.QueryStringProperty<QuestionsEntity>(_entities[6].properties[1]);

  /// See [QuestionsEntity.subtitle].
  static final subtitle =
      obx.QueryStringProperty<QuestionsEntity>(_entities[6].properties[2]);

  /// See [QuestionsEntity.options].
  static final options =
      obx.QueryStringProperty<QuestionsEntity>(_entities[6].properties[3]);

  /// See [QuestionsEntity.type].
  static final type =
      obx.QueryStringProperty<QuestionsEntity>(_entities[6].properties[4]);

  /// See [QuestionsEntity.min].
  static final min =
      obx.QueryIntegerProperty<QuestionsEntity>(_entities[6].properties[5]);

  /// See [QuestionsEntity.max].
  static final max =
      obx.QueryIntegerProperty<QuestionsEntity>(_entities[6].properties[6]);

  /// See [QuestionsEntity.answer].
  static final answer =
      obx.QueryStringProperty<QuestionsEntity>(_entities[6].properties[7]);

  /// See [QuestionsEntity.defaultValue].
  static final defaultValue =
      obx.QueryIntegerProperty<QuestionsEntity>(_entities[6].properties[8]);

  /// See [QuestionsEntity.variable].
  static final variable =
      obx.QueryStringProperty<QuestionsEntity>(_entities[6].properties[9]);
}

/// [Recording] entity fields to define ObjectBox queries.
class Recording_ {
  /// See [Recording.id].
  static final id =
      obx.QueryIntegerProperty<Recording>(_entities[7].properties[0]);

  /// See [Recording.name].
  static final name =
      obx.QueryStringProperty<Recording>(_entities[7].properties[1]);

  /// See [Recording.path].
  static final path =
      obx.QueryStringProperty<Recording>(_entities[7].properties[2]);

  /// See [Recording.transcript].
  static final transcript =
      obx.QueryStringProperty<Recording>(_entities[7].properties[3]);

  /// See [Recording.date].
  static final date =
      obx.QueryDateProperty<Recording>(_entities[7].properties[4]);

  /// See [Recording.answer].
  static final answer =
      obx.QueryRelationToOne<Recording, Answer>(_entities[7].properties[5]);
}

/// [Study] entity fields to define ObjectBox queries.
class Study_ {
  /// See [Study.id].
  static final id = obx.QueryIntegerProperty<Study>(_entities[8].properties[0]);

  /// See [Study.studyId].
  static final studyId =
      obx.QueryIntegerProperty<Study>(_entities[8].properties[1]);

  /// See [Study.experimentCode].
  static final experimentCode =
      obx.QueryStringProperty<Study>(_entities[8].properties[2]);

  /// See [Study.goals].
  static final goals =
      obx.QueryStringProperty<Study>(_entities[8].properties[3]);

  /// See [Study.incentive].
  static final incentive =
      obx.QueryStringProperty<Study>(_entities[8].properties[4]);

  /// See [Study.name].
  static final name =
      obx.QueryStringProperty<Study>(_entities[8].properties[5]);
}
